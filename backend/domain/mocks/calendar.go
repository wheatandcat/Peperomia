// Code generated by MockGen. DO NOT EDIT.
// Source: domain/calendar.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	firestore "cloud.google.com/go/firestore"
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/wheatandcat/Peperomia/backend/domain"
	reflect "reflect"
)

// MockCalendarRepository is a mock of CalendarRepository interface
type MockCalendarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarRepositoryMockRecorder
}

// MockCalendarRepositoryMockRecorder is the mock recorder for MockCalendarRepository
type MockCalendarRepositoryMockRecorder struct {
	mock *MockCalendarRepository
}

// NewMockCalendarRepository creates a new mock instance
func NewMockCalendarRepository(ctrl *gomock.Controller) *MockCalendarRepository {
	mock := &MockCalendarRepository{ctrl: ctrl}
	mock.recorder = &MockCalendarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalendarRepository) EXPECT() *MockCalendarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCalendarRepository) Create(ctx context.Context, f *firestore.Client, i domain.CalendarRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, f, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockCalendarRepositoryMockRecorder) Create(ctx, f, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCalendarRepository)(nil).Create), ctx, f, i)
}

// Update mocks base method
func (m *MockCalendarRepository) Update(ctx context.Context, f *firestore.Client, i domain.CalendarRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, f, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCalendarRepositoryMockRecorder) Update(ctx, f, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCalendarRepository)(nil).Update), ctx, f, i)
}

// Delete mocks base method
func (m *MockCalendarRepository) Delete(ctx context.Context, f *firestore.Client, i domain.CalendarRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, f, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCalendarRepositoryMockRecorder) Delete(ctx, f, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCalendarRepository)(nil).Delete), ctx, f, i)
}

// DeleteByUID mocks base method
func (m *MockCalendarRepository) DeleteByUID(ctx context.Context, f *firestore.Client, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUID", ctx, f, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUID indicates an expected call of DeleteByUID
func (mr *MockCalendarRepositoryMockRecorder) DeleteByUID(ctx, f, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUID", reflect.TypeOf((*MockCalendarRepository)(nil).DeleteByUID), ctx, f, uid)
}

// DeleteByItemID mocks base method
func (m *MockCalendarRepository) DeleteByItemID(ctx context.Context, f *firestore.Client, itemID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByItemID", ctx, f, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByItemID indicates an expected call of DeleteByItemID
func (mr *MockCalendarRepositoryMockRecorder) DeleteByItemID(ctx, f, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByItemID", reflect.TypeOf((*MockCalendarRepository)(nil).DeleteByItemID), ctx, f, itemID)
}
